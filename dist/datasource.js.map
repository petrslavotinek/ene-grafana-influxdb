{"version":3,"sources":["../src/datasource.js"],"names":["_","dateMath","InfluxSeries","InfluxQuery","ResponseParser","InfluxQueryBuilder","EnesaInfluxDatasource","instanceSettings","$q","backendSrv","templateSrv","type","urls","map","url","split","trim","jsonData","username","password","database","name","basicAuth","withCredentials","interval","timeInterval","supportAnnotations","supportMetrics","responseParser","options","timeFilter","getTimeFilter","scopedVars","targets","cloneDeep","queryTargets","queryModel","i","y","allQueries","target","hide","push","__interval","render","reduce","acc","current","when","data","adhocFilters","getAdhocFilters","length","renderAdhocFilters","value","replace","_seriesQuery","then","results","seriesList","result","series","alias","influxSeries","resultFormat","getTable","includeMeasurementColumn","timeSeries","getTimeSeries","annotation","query","reject","message","rangeRaw","getAnnotations","groupBy","group","params","param","variableExists","tags","interpolated","curry","parse","queryBuilder","measurement","buildExploreQuery","metricFindQuery","key","_influxRequest","q","epoch","memo","undefined","encodeURIComponent","join","error","get","res","status","catch","err","method","self","currentUrl","shift","u","p","db","extend","precision","inspect","paramSerializer","serializeParams","headers","Authorization","datasourceRequest","config","statusText","from","getInfluxTime","until","to","fromIsAbsolute","date","roundUp","isString","parts","exec","amount","parseInt","unit","valueOf"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from 'lodash';\n\nimport * as dateMath from 'app/core/utils/datemath';\nimport InfluxSeries from './influx_series';\nimport InfluxQuery from './influx_query';\nimport ResponseParser from './response_parser';\nimport { InfluxQueryBuilder } from './query_builder';\n\nexport default class EnesaInfluxDatasource {\n  type;\n  urls;\n  username;\n  password;\n  name;\n  database;\n  basicAuth;\n  withCredentials;\n  interval;\n  supportAnnotations;\n  supportMetrics;\n  responseParser;\n\n  /** @ngInject */\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = 'influxdb';\n    this.urls = _.map(instanceSettings.url.split(','), function(url) {\n      return url.trim();\n    });\n\n    this.$q = $q;\n    this.instanceSettings = instanceSettings;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n\n    const jsonData = instanceSettings.jsonData || {};\n\n    this.username = jsonData.username;\n    this.password = jsonData.password;\n    this.database = jsonData.database;\n    this.name = instanceSettings.name;\n    this.basicAuth = instanceSettings.basicAuth;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.interval = (instanceSettings.jsonData || {}).timeInterval;\n    this.supportAnnotations = true;\n    this.supportMetrics = true;\n    this.responseParser = new ResponseParser();\n  }\n\n  query(options) {\n    var timeFilter = this.getTimeFilter(options);\n    var scopedVars = options.scopedVars;\n    var targets = _.cloneDeep(options.targets);\n    var queryTargets = [];\n    var queryModel;\n    var i, y;\n\n    var allQueries = _.map(targets, target => {\n      if (target.hide) {\n        return '';\n      }\n\n      queryTargets.push(target);\n\n      // backward compatability\n      scopedVars.interval = scopedVars.__interval;\n\n      queryModel = new InfluxQuery(target, this.templateSrv, scopedVars);\n      return queryModel.render(true);\n    }).reduce((acc, current) => {\n      if (current !== '') {\n        acc += ';' + current;\n      }\n      return acc;\n    });\n\n    if (allQueries === '') {\n      return this.$q.when({ data: [] });\n    }\n\n    // add global adhoc filters to timeFilter\n    var adhocFilters = this.templateSrv.getAdhocFilters(this.name);\n    if (adhocFilters.length > 0) {\n      timeFilter += ' AND ' + queryModel.renderAdhocFilters(adhocFilters);\n    }\n\n    // replace grafana variables\n    scopedVars.timeFilter = { value: timeFilter };\n\n    // replace templated variables\n    allQueries = this.templateSrv.replace(allQueries, scopedVars);\n\n    return this._seriesQuery(allQueries).then((data) => {\n      if (!data || !data.results) {\n        return [];\n      }\n\n      var seriesList = [];\n      for (i = 0; i < data.results.length; i++) {\n        var result = data.results[i];\n        if (!result || !result.series) {\n          continue;\n        }\n\n        var target = queryTargets[i];\n        var alias = target.alias;\n        if (alias) {\n          alias = this.templateSrv.replace(target.alias, options.scopedVars);\n        }\n\n        var influxSeries = new InfluxSeries({\n          series: data.results[i].series,\n          alias: alias,\n        });\n\n        switch (target.resultFormat) {\n          case 'table': {\n            seriesList.push(influxSeries.getTable(target.includeMeasurementColumn));\n            break;\n          }\n          default: {\n            var timeSeries = influxSeries.getTimeSeries();\n            for (y = 0; y < timeSeries.length; y++) {\n              seriesList.push(timeSeries[y]);\n            }\n            break;\n          }\n        }\n      }\n\n      return { data: seriesList };\n    });\n  }\n\n  annotationQuery(options) {\n    if (!options.annotation.query) {\n      return this.$q.reject({\n        message: 'Query missing in annotation definition',\n      });\n    }\n\n    var timeFilter = this.getTimeFilter({ rangeRaw: options.rangeRaw });\n    var query = options.annotation.query.replace('$timeFilter', timeFilter);\n    query = this.templateSrv.replace(query, null, 'regex');\n\n    return this._seriesQuery(query).then(data => {\n      if (!data || !data.results || !data.results[0]) {\n        throw { message: 'No results in response from InfluxDB' };\n      }\n      return new InfluxSeries({\n        series: data.results[0].series,\n        annotation: options.annotation,\n      }).getAnnotations();\n    });\n  }\n\n  targetContainsTemplate(target) {\n    for (let group of target.groupBy) {\n      for (let param of group.params) {\n        if (this.templateSrv.variableExists(param)) {\n          return true;\n        }\n      }\n    }\n\n    for (let i in target.tags) {\n      if (this.templateSrv.variableExists(target.tags[i].value)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  metricFindQuery(query) {\n    var interpolated = this.templateSrv.replace(query, null, 'regex');\n\n    return this._seriesQuery(interpolated).then(_.curry(this.responseParser.parse)(query));\n  }\n\n  getTagKeys(options) {\n    var queryBuilder = new InfluxQueryBuilder({ measurement: '', tags: [] }, this.database);\n    var query = queryBuilder.buildExploreQuery('TAG_KEYS');\n    return this.metricFindQuery(query);\n  }\n\n  getTagValues(options) {\n    var queryBuilder = new InfluxQueryBuilder({ measurement: '', tags: [] }, this.database);\n    var query = queryBuilder.buildExploreQuery('TAG_VALUES', options.key);\n    return this.metricFindQuery(query);\n  }\n\n  _seriesQuery(query) {\n    if (!query) {\n      return this.$q.when({ results: [] });\n    }\n\n    return this._influxRequest('GET', '/query', { q: query, epoch: 'ms' });\n  }\n\n  serializeParams(params) {\n    if (!params) {\n      return '';\n    }\n\n    return _.reduce(\n      params,\n      (memo, value, key) => {\n        if (value === null || value === undefined) {\n          return memo;\n        }\n        memo.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\n        return memo;\n      },\n      []\n    ).join('&');\n  }\n\n  testDatasource() {\n    var queryBuilder = new InfluxQueryBuilder({ measurement: '', tags: [] }, this.database);\n    var query = queryBuilder.buildExploreQuery('RETENTION POLICIES');\n\n    return this._seriesQuery(query)\n      .then(res => {\n        let error = _.get(res, 'results[0].error');\n        if (error) {\n          return { status: 'error', message: error };\n        }\n        return { status: 'success', message: 'Data source is working' };\n      })\n      .catch(err => {\n        return { status: 'error', message: err.message };\n      });\n  }\n\n  _influxRequest(method, url, data) {\n    var self = this;\n\n    var currentUrl = self.urls.shift();\n    self.urls.push(currentUrl);\n\n    var params = {};\n\n    if (self.username) {\n      params.u = self.username;\n      params.p = self.password;\n    }\n\n    if (self.database) {\n      params.db = self.database;\n    }\n\n    if (method === 'GET') {\n      _.extend(params, data);\n      data = null;\n    }\n\n    var options = {\n      method: method,\n      url: currentUrl + url,\n      params: params,\n      data: data,\n      precision: 'ms',\n      inspect: { type: 'influxdb' },\n      paramSerializer: this.serializeParams,\n    };\n\n    options.headers = options.headers || {};\n    if (this.basicAuth || this.withCredentials) {\n      options.withCredentials = true;\n    }\n    if (self.basicAuth) {\n      options.headers.Authorization = self.basicAuth;\n    }\n\n    return this.backendSrv.datasourceRequest(options).then(\n      result => {\n        return result.data;\n      },\n      function(err) {\n        if (err.status !== 0 || err.status >= 300) {\n          if (err.data && err.data.error) {\n            throw {\n              message: 'InfluxDB Error: ' + err.data.error,\n              data: err.data,\n              config: err.config,\n            };\n          } else {\n            throw {\n              message: 'Network Error: ' + err.statusText + '(' + err.status + ')',\n              data: err.data,\n              config: err.config,\n            };\n          }\n        }\n      }\n    );\n  }\n\n  getTimeFilter(options) {\n    var from = this.getInfluxTime(options.rangeRaw.from, false);\n    var until = this.getInfluxTime(options.rangeRaw.to, true);\n    var fromIsAbsolute = from[from.length - 1] === 'ms';\n\n    if (until === 'now()' && !fromIsAbsolute) {\n      return 'time >= ' + from;\n    }\n\n    return 'time >= ' + from + ' and time <= ' + until;\n  }\n\n  getInfluxTime(date, roundUp) {\n    if (_.isString(date)) {\n      if (date === 'now') {\n        return 'now()';\n      }\n\n      var parts = /^now-(\\d+)([d|h|m|s])$/.exec(date);\n      if (parts) {\n        var amount = parseInt(parts[1]);\n        var unit = parts[2];\n        return 'now() - ' + amount + unit;\n      }\n      date = dateMath.parse(date, roundUp);\n    }\n\n    return date.valueOf() + 'ms';\n  }\n}\n"]}