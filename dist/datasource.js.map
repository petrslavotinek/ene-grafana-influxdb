{"version":3,"sources":["../src/datasource.js"],"names":["angular","_","dateMath","EneInfluxSeries","EneInfluxQuery","EneResponseParser","EneInfluxQueryBuilder","EneInfluxDatasource","instanceSettings","$q","backendSrv","templateSrv","type","urls","map","url","split","trim","username","password","name","database","basicAuth","withCredentials","interval","jsonData","timeInterval","supportAnnotations","supportMetrics","responseParser","options","timeFilter","getTimeFilter","scopedVars","cloneDeep","targets","queryTargets","queryModel","i","y","allQueries","target","hide","push","value","render","reduce","acc","current","when","data","adhocFilters","getAdhocFilters","length","renderAdhocFilters","replace","_seriesQuery","then","results","seriesList","result","series","alias","influxSeries","resultFormat","getTable","includeMeasurementColumn","timeSeries","getTimeSeries","annotation","query","reject","message","rangeRaw","getAnnotations","groupBy","group","params","param","variableExists","tags","interpolated","curry","parse","queryBuilder","measurement","buildExploreQuery","metricFindQuery","key","_influxRequest","q","epoch","memo","undefined","encodeURIComponent","join","status","title","method","self","currentUrl","shift","u","p","db","extend","precision","inspect","paramSerializer","serializeParams","headers","Authorization","datasourceRequest","err","error","config","from","getInfluxTime","until","to","fromIsAbsolute","date","roundUp","isString","parts","exec","amount","parseInt","unit","valueOf","toFixed"],"mappings":"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","file":"datasource.js","sourcesContent":["import angular from 'angular';\r\nimport _ from 'lodash';\r\n\r\nimport * as dateMath from 'app/core/utils/datemath';\r\nimport EneInfluxSeries from './influx_series';\r\nimport EneInfluxQuery from './influx_query';\r\nimport EneResponseParser from './response_parser';\r\nimport EneInfluxQueryBuilder from './query_builder';\r\n\r\nexport default class EneInfluxDatasource {\r\n  type;\r\n  urls;\r\n  username;\r\n  password;\r\n  name;\r\n  database;\r\n  basicAuth;\r\n  withCredentials;\r\n  interval;\r\n  supportAnnotations;\r\n  supportMetrics;\r\n  responseParser;\r\n\r\n  /** @ngInject */\r\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\r\n    this.$q = $q;\r\n    this.backendSrv = backendSrv;\r\n    this.templateSrv = templateSrv;\r\n\r\n    this.type = 'influxdb';\r\n    this.urls = _.map(instanceSettings.url.split(','), function(url) {\r\n      return url.trim();\r\n    });\r\n\r\n    this.username = instanceSettings.username;\r\n    this.password = instanceSettings.password;\r\n    this.name = instanceSettings.name;\r\n    this.database = instanceSettings.database;\r\n    this.basicAuth = instanceSettings.basicAuth;\r\n    this.withCredentials = instanceSettings.withCredentials;\r\n    this.interval = (instanceSettings.jsonData || {}).timeInterval;\r\n    this.supportAnnotations = true;\r\n    this.supportMetrics = true;\r\n    this.responseParser = new EneResponseParser();\r\n  }\r\n\r\n  query(options) {\r\n    var timeFilter = this.getTimeFilter(options);\r\n    var scopedVars = options.scopedVars ? _.cloneDeep(options.scopedVars) : {};\r\n    var targets = _.cloneDeep(options.targets);\r\n    var queryTargets = [];\r\n    var queryModel;\r\n    var i, y;\r\n\r\n    var allQueries = _.map(targets, target => {\r\n      if (target.hide) { return \"\"; }\r\n\r\n      queryTargets.push(target);\r\n\r\n      // build query\r\n      scopedVars.interval = {value: target.interval || options.interval};\r\n\r\n      queryModel = new EneInfluxQuery(target, this.templateSrv, scopedVars);\r\n      return queryModel.render(true);\r\n\r\n    }).reduce((acc, current) => {\r\n      if (current !== \"\") {\r\n        acc += \";\" + current;\r\n      }\r\n      return acc;\r\n    });\r\n\r\n    if (allQueries === '') {\r\n      return this.$q.when({data: []});\r\n    }\r\n\r\n    // add global adhoc filters to timeFilter\r\n    var adhocFilters = this.templateSrv.getAdhocFilters(this.name);\r\n    if (adhocFilters.length > 0 ) {\r\n      timeFilter += ' AND ' + queryModel.renderAdhocFilters(adhocFilters);\r\n    }\r\n\r\n    // replace grafana variables\r\n    scopedVars.timeFilter = {value: timeFilter};\r\n\r\n    // replace templated variables\r\n    allQueries = this.templateSrv.replace(allQueries, scopedVars);\r\n\r\n    return this._seriesQuery(allQueries).then((data) => {\r\n      if (!data || !data.results) {\r\n        return [];\r\n      }\r\n\r\n      var seriesList = [];\r\n      for (i = 0; i < data.results.length; i++) {\r\n        var result = data.results[i];\r\n        if (!result || !result.series) { continue; }\r\n\r\n        var target = queryTargets[i];\r\n        var alias = target.alias;\r\n        if (alias) {\r\n          alias = this.templateSrv.replace(target.alias, options.scopedVars);\r\n        }\r\n\r\n        var influxSeries = new EneInfluxSeries({ series: data.results[i].series, alias: alias });\r\n\r\n        switch (target.resultFormat) {\r\n          case 'table': {\r\n            seriesList.push(influxSeries.getTable(target.includeMeasurementColumn));\r\n            break;\r\n          }\r\n          default: {\r\n            var timeSeries = influxSeries.getTimeSeries();\r\n            for (y = 0; y < timeSeries.length; y++) {\r\n              seriesList.push(timeSeries[y]);\r\n            }\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      return {data: seriesList};\r\n    });\r\n  };\r\n\r\n  annotationQuery(options) {\r\n    if (!options.annotation.query) {\r\n      return this.$q.reject({message: 'Query missing in annotation definition'});\r\n    }\r\n\r\n    var timeFilter = this.getTimeFilter({rangeRaw: options.rangeRaw});\r\n    var query = options.annotation.query.replace('$timeFilter', timeFilter);\r\n    query = this.templateSrv.replace(query, null, 'regex');\r\n\r\n    return this._seriesQuery(query).then(data => {\r\n      if (!data || !data.results || !data.results[0]) {\r\n        throw { message: 'No results in response from InfluxDB' };\r\n      }\r\n      return new EneInfluxSeries({series: data.results[0].series, annotation: options.annotation}).getAnnotations();\r\n    });\r\n  };\r\n\r\n  targetContainsTemplate(target) {\r\n    for (let group of target.groupBy) {\r\n      for (let param of group.params) {\r\n        if (this.templateSrv.variableExists(param)) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n\r\n    for (let i in target.tags) {\r\n      if (this.templateSrv.variableExists(target.tags[i].value)) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  };\r\n\r\n  metricFindQuery(query) {\r\n    var interpolated = this.templateSrv.replace(query, null, 'regex');\r\n\r\n    return this._seriesQuery(interpolated)\r\n      .then(_.curry(this.responseParser.parse)(query));\r\n  }\r\n\r\n  getTagKeys(options) {\r\n    var queryBuilder = new EneInfluxQueryBuilder({measurement: '', tags: []}, this.database);\r\n    var query = queryBuilder.buildExploreQuery('TAG_KEYS');\r\n    return this.metricFindQuery(query);\r\n  }\r\n\r\n  getTagValues(options) {\r\n    var queryBuilder = new EneInfluxQueryBuilder({measurement: '', tags: []}, this.database);\r\n    var query = queryBuilder.buildExploreQuery('TAG_VALUES', options.key);\r\n    return this.metricFindQuery(query);\r\n  }\r\n\r\n  _seriesQuery(query) {\r\n    if (!query) { return this.$q.when({results: []}); }\r\n\r\n    return this._influxRequest('GET', '/query', {q: query, epoch: 'ms'});\r\n  }\r\n\r\n  serializeParams(params) {\r\n    if (!params) { return '';}\r\n\r\n    return _.reduce(params, (memo, value, key) => {\r\n      if (value === null || value === undefined) { return memo; }\r\n      memo.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\r\n      return memo;\r\n    }, []).join(\"&\");\r\n  }\r\n\r\n  testDatasource() {\r\n    return this.metricFindQuery('SHOW MEASUREMENTS LIMIT 1').then(() => {\r\n      return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\r\n    });\r\n  }\r\n\r\n  _influxRequest(method, url, data) {\r\n    var self = this;\r\n\r\n    var currentUrl = self.urls.shift();\r\n    self.urls.push(currentUrl);\r\n\r\n    var params = {\r\n      u: self.username,\r\n      p: self.password,\r\n    };\r\n\r\n    if (self.database) {\r\n      params.db = self.database;\r\n    }\r\n\r\n    if (method === 'GET') {\r\n      _.extend(params, data);\r\n      data = null;\r\n    }\r\n\r\n    var options = {\r\n      method: method,\r\n      url:    currentUrl + url,\r\n      params: params,\r\n      data:   data,\r\n      precision: \"ms\",\r\n      inspect: { type: 'influxdb' },\r\n      paramSerializer: this.serializeParams,\r\n    };\r\n\r\n    options.headers = options.headers || {};\r\n    if (this.basicAuth || this.withCredentials) {\r\n      options.withCredentials = true;\r\n    }\r\n    if (self.basicAuth) {\r\n      options.headers.Authorization = self.basicAuth;\r\n    }\r\n\r\n    return this.backendSrv.datasourceRequest(options).then(result => {\r\n      return result.data;\r\n    }, function(err) {\r\n      if (err.status !== 0 || err.status >= 300) {\r\n        if (err.data && err.data.error) {\r\n          throw { message: 'InfluxDB Error Response: ' + err.data.error, data: err.data, config: err.config };\r\n        } else {\r\n          throw { message: 'InfluxDB Error: ' + err.message, data: err.data, config: err.config };\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  getTimeFilter(options) {\r\n    var from = this.getInfluxTime(options.rangeRaw.from, false);\r\n    var until = this.getInfluxTime(options.rangeRaw.to, true);\r\n    var fromIsAbsolute = from[from.length-1] === 's';\r\n\r\n    if (until === 'now()' && !fromIsAbsolute) {\r\n      return 'time > ' + from;\r\n    }\r\n\r\n    return 'time > ' + from + ' and time < ' + until;\r\n  }\r\n\r\n  getInfluxTime(date, roundUp) {\r\n    if (_.isString(date)) {\r\n      if (date === 'now') {\r\n        return 'now()';\r\n      }\r\n\r\n      var parts = /^now-(\\d+)([d|h|m|s])$/.exec(date);\r\n      if (parts) {\r\n        var amount = parseInt(parts[1]);\r\n        var unit = parts[2];\r\n        return 'now() - ' + amount + unit;\r\n      }\r\n      date = dateMath.parse(date, roundUp);\r\n    }\r\n    return (date.valueOf() / 1000).toFixed(0) + 's';\r\n  }\r\n}\r\n\r\n"]}