{"version":3,"sources":["../src/query_ctrl.js"],"names":["angular","_","InfluxQueryBuilder","InfluxQuery","queryPart","QueryCtrl","EnesaInfluxQueryCtrl","$scope","$injector","templateSrv","$q","uiSegmentSrv","queryModel","target","panel","scopedVars","queryBuilder","datasource","database","groupBySegment","newPlusButton","resultFormats","text","value","policySegment","newSegment","policy","measurement","measurementSegment","newSelectMeasurement","tagSegments","tags","tag","operator","test","condition","push","newCondition","newKey","key","newOperator","newKeyValue","fixTagSegments","buildSelectMenu","removeTagFilterSegment","fake","orderByTime","categories","getCategories","selectMenu","reduce","memo","cat","menu","submenu","map","item","type","query","buildExploreQuery","metricFindQuery","then","options","hasFill","limit","slimit","hasGroupByTime","catch","handleQueryError","bind","addGroupBy","plusButton","html","panelCtrl","refresh","selectParts","subitem","addSelectPart","part","evt","name","fieldsQuery","transformToSegments","removeSelectPart","when","index","tagsQuery","removeGroupByPart","count","length","lastSegment","Math","max","policiesQuery","render","err","console","log","rawQuery","measurementFilter","undefined","error","message","addTemplateVars","segments","results","segment","expandable","variables","variable","unshift","nextValue","newOperators","splice","copy","newFake","cssClass","rebuildTargetTagConditions","tagIndex","tagOperator","each","segment2","getTagValueOperator","tagValue","templateUrl"],"mappings":"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","file":"query_ctrl.js","sourcesContent":["import angular from 'angular';\nimport _ from 'lodash';\nimport { InfluxQueryBuilder } from './query_builder';\nimport InfluxQuery from './influx_query';\nimport queryPart from './query_part';\nimport { QueryCtrl } from 'app/plugins/sdk';\n\nexport class EnesaInfluxQueryCtrl extends QueryCtrl {\n  static templateUrl = 'partials/query.editor.html';\n\n  queryModel;\n  queryBuilder;\n  groupBySegment;\n  resultFormats;\n  orderByTime;\n  policySegment;\n  tagSegments;\n  selectMenu;\n  measurementSegment;\n  removeTagFilterSegment;\n\n  /** @ngInject **/\n  constructor($scope, $injector, templateSrv, $q, uiSegmentSrv) {\n    super($scope, $injector);\n\n    // this.$scope = $scope;\n    // this.$injector = $injector;\n    this.$q = $q;\n    this.templateSrv = templateSrv;\n    this.uiSegmentSrv = uiSegmentSrv;\n    this.queryModel = new InfluxQuery(this.target, templateSrv, this.panel.scopedVars);\n    this.queryBuilder = new InfluxQueryBuilder(this.target, this.datasource.database);\n    this.groupBySegment = uiSegmentSrv.newPlusButton();\n    this.resultFormats = [{ text: 'Time series', value: 'time_series' }, { text: 'Table', value: 'table' }];\n    this.policySegment = uiSegmentSrv.newSegment(this.target.policy);\n\n    if (!this.target.measurement) {\n      this.measurementSegment = uiSegmentSrv.newSelectMeasurement();\n    } else {\n      this.measurementSegment = uiSegmentSrv.newSegment(this.target.measurement);\n    }\n\n    this.tagSegments = [];\n    for (let tag of this.target.tags) {\n      if (!tag.operator) {\n        if (/^\\/.*\\/$/.test(tag.value)) {\n          tag.operator = '=~';\n        } else {\n          tag.operator = '=';\n        }\n      }\n\n      if (tag.condition) {\n        this.tagSegments.push(uiSegmentSrv.newCondition(tag.condition));\n      }\n\n      this.tagSegments.push(uiSegmentSrv.newKey(tag.key));\n      this.tagSegments.push(uiSegmentSrv.newOperator(tag.operator));\n      this.tagSegments.push(uiSegmentSrv.newKeyValue(tag.value));\n    }\n\n    this.fixTagSegments();\n    this.buildSelectMenu();\n    this.removeTagFilterSegment = uiSegmentSrv.newSegment({\n      fake: true,\n      value: '-- remove tag filter --',\n    });\n  }\n\n  removeOrderByTime() {\n    this.target.orderByTime = 'ASC';\n  }\n\n  buildSelectMenu() {\n    var categories = queryPart.getCategories();\n    this.selectMenu = _.reduce(\n      categories,\n      function (memo, cat, key) {\n        var menu = {\n          text: key,\n          submenu: cat.map(item => {\n            return { text: item.type, value: item.type };\n          }),\n        };\n        memo.push(menu);\n        return memo;\n      },\n      []\n    );\n  }\n\n  getGroupByOptions() {\n    var query = this.queryBuilder.buildExploreQuery('TAG_KEYS');\n\n    return this.datasource\n      .metricFindQuery(query)\n      .then(tags => {\n        var options = [];\n        if (!this.queryModel.hasFill()) {\n          options.push(this.uiSegmentSrv.newSegment({ value: 'fill(null)' }));\n        }\n        if (!this.target.limit) {\n          options.push(this.uiSegmentSrv.newSegment({ value: 'LIMIT' }));\n        }\n        if (!this.target.slimit) {\n          options.push(this.uiSegmentSrv.newSegment({ value: 'SLIMIT' }));\n        }\n        if (this.target.orderByTime === 'ASC') {\n          options.push(this.uiSegmentSrv.newSegment({ value: 'ORDER BY time DESC' }));\n        }\n        if (!this.queryModel.hasGroupByTime()) {\n          options.push(this.uiSegmentSrv.newSegment({ value: 'time($interval)' }));\n        }\n        for (let tag of tags) {\n          options.push(this.uiSegmentSrv.newSegment({ value: 'tag(' + tag.text + ')' }));\n        }\n        return options;\n      })\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  groupByAction() {\n    switch (this.groupBySegment.value) {\n      case 'LIMIT': {\n        this.target.limit = 10;\n        break;\n      }\n      case 'SLIMIT': {\n        this.target.slimit = 10;\n        break;\n      }\n      case 'ORDER BY time DESC': {\n        this.target.orderByTime = 'DESC';\n        break;\n      }\n      default: {\n        this.queryModel.addGroupBy(this.groupBySegment.value);\n      }\n    }\n\n    var plusButton = this.uiSegmentSrv.newPlusButton();\n    this.groupBySegment.value = plusButton.value;\n    this.groupBySegment.html = plusButton.html;\n    this.panelCtrl.refresh();\n  }\n\n  addSelectPart(selectParts, cat, subitem) {\n    this.queryModel.addSelectPart(selectParts, subitem.value);\n    this.panelCtrl.refresh();\n  }\n\n  handleSelectPartEvent(selectParts, part, evt) {\n    switch (evt.name) {\n      case 'get-param-options': {\n        var fieldsQuery = this.queryBuilder.buildExploreQuery('FIELDS');\n        return this.datasource\n          .metricFindQuery(fieldsQuery)\n          .then(this.transformToSegments(true))\n          .catch(this.handleQueryError.bind(this));\n      }\n      case 'part-param-changed': {\n        this.panelCtrl.refresh();\n        break;\n      }\n      case 'action': {\n        this.queryModel.removeSelectPart(selectParts, part);\n        this.panelCtrl.refresh();\n        break;\n      }\n      case 'get-part-actions': {\n        return this.$q.when([{ text: 'Remove', value: 'remove-part' }]);\n      }\n    }\n  }\n\n  handleGroupByPartEvent(part, index, evt) {\n    switch (evt.name) {\n      case 'get-param-options': {\n        var tagsQuery = this.queryBuilder.buildExploreQuery('TAG_KEYS');\n        return this.datasource\n          .metricFindQuery(tagsQuery)\n          .then(this.transformToSegments(true))\n          .catch(this.handleQueryError.bind(this));\n      }\n      case 'part-param-changed': {\n        this.panelCtrl.refresh();\n        break;\n      }\n      case 'action': {\n        this.queryModel.removeGroupByPart(part, index);\n        this.panelCtrl.refresh();\n        break;\n      }\n      case 'get-part-actions': {\n        return this.$q.when([{ text: 'Remove', value: 'remove-part' }]);\n      }\n    }\n  }\n\n  fixTagSegments() {\n    var count = this.tagSegments.length;\n    var lastSegment = this.tagSegments[Math.max(count - 1, 0)];\n\n    if (!lastSegment || lastSegment.type !== 'plus-button') {\n      this.tagSegments.push(this.uiSegmentSrv.newPlusButton());\n    }\n  }\n\n  measurementChanged() {\n    this.target.measurement = this.measurementSegment.value;\n    this.panelCtrl.refresh();\n  }\n\n  getPolicySegments() {\n    var policiesQuery = this.queryBuilder.buildExploreQuery('RETENTION POLICIES');\n    return this.datasource\n      .metricFindQuery(policiesQuery)\n      .then(this.transformToSegments(false))\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  policyChanged() {\n    this.target.policy = this.policySegment.value;\n    this.panelCtrl.refresh();\n  }\n\n  toggleEditorMode() {\n    try {\n      this.target.query = this.queryModel.render(false);\n    } catch (err) {\n      console.log('query render error');\n    }\n    this.target.rawQuery = !this.target.rawQuery;\n  }\n\n  getMeasurements(measurementFilter) {\n    var query = this.queryBuilder.buildExploreQuery('MEASUREMENTS', undefined, measurementFilter);\n    return this.datasource\n      .metricFindQuery(query)\n      .then(this.transformToSegments(true))\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  handleQueryError(err) {\n    this.error = err.message || 'Failed to issue metric query';\n    return [];\n  }\n\n  transformToSegments(addTemplateVars) {\n    return results => {\n      var segments = _.map(results, segment => {\n        return this.uiSegmentSrv.newSegment({\n          value: segment.text,\n          expandable: segment.expandable,\n        });\n      });\n\n      if (addTemplateVars) {\n        for (let variable of this.templateSrv.variables) {\n          segments.unshift(\n            this.uiSegmentSrv.newSegment({\n              type: 'template',\n              value: '/^$' + variable.name + '$/',\n              expandable: true,\n            })\n          );\n        }\n      }\n\n      return segments;\n    };\n  }\n\n  getTagsOrValues(segment, index) {\n    if (segment.type === 'condition') {\n      return this.$q.when([this.uiSegmentSrv.newSegment('AND'), this.uiSegmentSrv.newSegment('OR')]);\n    }\n    if (segment.type === 'operator') {\n      var nextValue = this.tagSegments[index + 1].value;\n      if (/^\\/.*\\/$/.test(nextValue)) {\n        return this.$q.when(this.uiSegmentSrv.newOperators(['=~', '!~']));\n      } else {\n        return this.$q.when(this.uiSegmentSrv.newOperators(['=', '!=', '<>', '<', '>']));\n      }\n    }\n\n    var query, addTemplateVars;\n    if (segment.type === 'key' || segment.type === 'plus-button') {\n      query = this.queryBuilder.buildExploreQuery('TAG_KEYS');\n      addTemplateVars = false;\n    } else if (segment.type === 'value') {\n      query = this.queryBuilder.buildExploreQuery('TAG_VALUES', this.tagSegments[index - 2].value);\n      addTemplateVars = true;\n    }\n\n    return this.datasource\n      .metricFindQuery(query)\n      .then(this.transformToSegments(addTemplateVars))\n      .then(results => {\n        if (segment.type === 'key') {\n          results.splice(0, 0, angular.copy(this.removeTagFilterSegment));\n        }\n        return results;\n      })\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  getFieldSegments() {\n    var fieldsQuery = this.queryBuilder.buildExploreQuery('FIELDS');\n    return this.datasource\n      .metricFindQuery(fieldsQuery)\n      .then(this.transformToSegments(false))\n      .catch(this.handleQueryError);\n  }\n\n  tagSegmentUpdated(segment, index) {\n    this.tagSegments[index] = segment;\n\n    // handle remove tag condition\n    if (segment.value === this.removeTagFilterSegment.value) {\n      this.tagSegments.splice(index, 3);\n      if (this.tagSegments.length === 0) {\n        this.tagSegments.push(this.uiSegmentSrv.newPlusButton());\n      } else if (this.tagSegments.length > 2) {\n        this.tagSegments.splice(Math.max(index - 1, 0), 1);\n        if (this.tagSegments[this.tagSegments.length - 1].type !== 'plus-button') {\n          this.tagSegments.push(this.uiSegmentSrv.newPlusButton());\n        }\n      }\n    } else {\n      if (segment.type === 'plus-button') {\n        if (index > 2) {\n          this.tagSegments.splice(index, 0, this.uiSegmentSrv.newCondition('AND'));\n        }\n        this.tagSegments.push(this.uiSegmentSrv.newOperator('='));\n        this.tagSegments.push(this.uiSegmentSrv.newFake('select tag value', 'value', 'query-segment-value'));\n        segment.type = 'key';\n        segment.cssClass = 'query-segment-key';\n      }\n\n      if (index + 1 === this.tagSegments.length) {\n        this.tagSegments.push(this.uiSegmentSrv.newPlusButton());\n      }\n    }\n\n    this.rebuildTargetTagConditions();\n  }\n\n  rebuildTargetTagConditions() {\n    var tags = [];\n    var tagIndex = 0;\n    var tagOperator = '';\n\n    _.each(this.tagSegments, (segment2, index) => {\n      if (segment2.type === 'key') {\n        if (tags.length === 0) {\n          tags.push({});\n        }\n        tags[tagIndex].key = segment2.value;\n      } else if (segment2.type === 'value') {\n        tagOperator = this.getTagValueOperator(segment2.value, tags[tagIndex].operator);\n        if (tagOperator) {\n          this.tagSegments[index - 1] = this.uiSegmentSrv.newOperator(tagOperator);\n          tags[tagIndex].operator = tagOperator;\n        }\n        tags[tagIndex].value = segment2.value;\n      } else if (segment2.type === 'condition') {\n        tags.push({ condition: segment2.value });\n        tagIndex += 1;\n      } else if (segment2.type === 'operator') {\n        tags[tagIndex].operator = segment2.value;\n      }\n    });\n\n    this.target.tags = tags;\n    this.panelCtrl.refresh();\n  }\n\n  getTagValueOperator(tagValue, tagOperator) {\n    if (tagOperator !== '=~' && tagOperator !== '!~' && /^\\/.*\\/$/.test(tagValue)) {\n      return '=~';\n    } else if ((tagOperator === '=~' || tagOperator === '!~') && /^(?!\\/.*\\/$)/.test(tagValue)) {\n      return '=';\n    }\n    return null;\n  }\n\n  getCollapsedText() {\n    return this.queryModel.render(false);\n  }\n}\n"]}